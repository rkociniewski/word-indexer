#!/bin/bash
# Pre-commit checks for project

set -e

echo "üîç Running pre-commit checks..."

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# 1. Check for debug statements (exclude logger classes and test files)
echo "üìù Checking for debug statements..."
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(kt|java)$' | grep -v -E '(AppLogger|Logger|Log\.kt|Test\.kt|test/)' || true)

if [ -n "$STAGED_FILES" ]; then
    if echo "$STAGED_FILES" | xargs grep -nE '(System\.out\.println|Log\.[dev]|console\.log|debugger|TODO|FIXME)' 2>/dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  Warning: Debug statements found${NC}"
        echo "Consider removing them before committing"
        echo "Note: Logger/AppLogger classes are excluded from this check"
    fi
fi

# 2. Check for large files
echo "üì¶ Checking for large files..."
MAX_SIZE=5242880
for file in $(git diff --cached --name-only --diff-filter=ACM); do
    if [ -f "$file" ]; then
        size=$(wc -c < "$file" 2>/dev/null || echo 0)
        if [ "$size" -gt "$MAX_SIZE" ]; then
            echo -e "${RED}‚ùå File too large: $file ($(($size / 1048576))MB)${NC}"
            echo "Files larger than 5MB should not be committed"
            exit 1
        fi
    fi
done

# 3. Check for secrets/API keys (exclude documentation files)
echo "üîê Checking for secrets..."
STAGED_CODE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -v -E '\.(md|txt)$' | grep -v -E '(test/|Test\.kt|spec\.)' || true)

if [ -n "$STAGED_CODE_FILES" ]; then
    SECRET_FOUND=false

    for pattern in 'api[_-]?key\s*=\s*["\047][^"\047]{10,}' 'secret\s*=\s*["\047][^"\047]{10,}' 'password\s*=\s*["\047][^"\047]{5,}' 'token\s*=\s*["\047][^"\047]{10,}' 'aws[_-]?access[_-]?key' 'private[_-]?key'; do
        if echo "$STAGED_CODE_FILES" | xargs grep -lE "$pattern" 2>/dev/null >/dev/null; then
            echo -e "${RED}‚ùå Potential secret detected!${NC}"
            echo "Pattern: $pattern"
            echo "Make sure you're not committing sensitive data"
            echo "Files excluded: *.md, *.txt, *test*, *Test.kt"
            SECRET_FOUND=true
            break
        fi
    done

    if [ "$SECRET_FOUND" = true ]; then
        exit 1
    fi
fi

# 4. Check for merge conflict markers
echo "üîÄ Checking for merge conflicts..."
if git diff --cached | grep -E '^(<<<<<<<|=======|>>>>>>>)' >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Merge conflict markers found${NC}"
    echo "Please resolve all conflicts before committing"
    exit 1
fi

# 5. Run ktlint (if available)
if command -v ktlint &> /dev/null; then
    echo "üé® Running ktlint..."
    STAGED_KT=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.kt$' || true)
    if [ -n "$STAGED_KT" ]; then
        if ! echo "$STAGED_KT" | xargs ktlint --relative 2>/dev/null; then
            echo -e "${RED}‚ùå Kotlin code style issues found${NC}"
            echo "Run: ./gradlew ktlintFormat"
            exit 1
        fi
    fi
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
exit 0
